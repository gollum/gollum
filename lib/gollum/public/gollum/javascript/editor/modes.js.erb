/*  modes.js

    Add highlighting rules for gollum-specific block level syntax to ACE.
    We first have to extends the Highlighters for each supported syntax,
    so that later, we can extend the relevant ACE Mode to use the custom Highlighter.
    We do this for all and only those languages which ACE supports, i.e.,
    for which it has a specific Highlighter and Mode. So we do not extend e.g. Creole,
    for which there is no ACE Mode (we use the 'text mode' instead).
    At the moment there are two gollum-wide block level syntaxes which need to be added:

    * GitHub style code blocks: ``` ... ```
    * UML blocks: @startuml ... @enduml

    The regexes defined for these below should be equivalent to the regexes used by
    gollum-lib to extract these blocks.

    ACE Docs:
      * Highlight Rules: https://cloud9-sdk.readme.io/docs/highlighting-rules
      * Dynamically generating modes: https://stackoverflow.com/questions/22166784/dynamically-update-syntax-highlighting-mode-rules-for-the-ace-editor
*/

<%
codeblock_rule_name = 'GitHubBlock'
codeblock_rule_id = 'githubblock'
%>

// The rule defining the github-codeblock state for the ACE Tokenizer
var <%= codeblock_rule_name %> = [{
  token: "support.function",
  regex: /^( {0,3})(``[`]+)\s*$/,
  next:  "start"
  },
  {
    defaultToken: "support.function"
  }];

// The rule defining how the ACE Tokenizer gets into the github-codeblock state
var GitHubStart = {
  token: "support.function",
  regex: "^( {0,3})(``[`]+)$",
  next:  "<%= codeblock_rule_id %>"
};

<%
uml_rule_name = 'UMLBlock'
uml_rule_id = 'umlblock'
%>

// The rule defining the UML state for the ACE Tokenizer
var <%= uml_rule_name %>  = [{
  token: "support.function",
  regex: "^\\@enduml$",
  next:  "start"
  },
  {
    defaultToken: "support.function"
  }];

// The rule defining how the ACE Tokenizer gets into the UML state
var UMLStart = {
  token: "support.function",
  regex: "^(?:[ \\t]*)\\@startuml$",
  next:  "<%= uml_rule_id %>"
};

<%
default_rules = {
  :path => '',
  :rule_name => '',
  :start_rules => ['GitHubStart', 'UMLStart'],
  :block_rules => {codeblock_rule_id => codeblock_rule_name, uml_rule_id => uml_rule_name}
}

rst_rules = default_rules.dup
rst_rules[:path] = 'ace/mode/rst_highlight_rules'
rst_rules[:rule_name] = 'RSTHighlightRules'

asciidoc_rules = default_rules.dup
asciidoc_rules[:path] = 'ace/mode/asciidoc_highlight_rules'
asciidoc_rules[:rule_name] = 'AsciidocHighlightRules'

textile_rules = default_rules.dup
textile_rules[:path] = 'ace/mode/textile_highlight_rules'
textile_rules[:rule_name] = 'TextileHighlightRules'

{
  'GollumRstHighlightRules'      => rst_rules,
  'GollumAsciidocHighlightRules' => asciidoc_rules,
  'GollumTextileHighlightRules'  => textile_rules,
  'GollumMarkdownHighlightRules' => {
    :path => 'ace/mode/markdown_highlight_rules',
    :rule_name => 'MarkdownHighlightRules',
    :start_rules => ['UMLStart'], # Markdown only needs to be extended with UML rules
    :block_rules => {uml_rule_id => uml_rule_name}    
  }
}.each do |name, highlighter|
%>
// Register gollum-specific HighlightRules with ACE
ace.define("<%= name %>", [], function(require, exports, module) {
  "use strict";

  var oop = require("ace/lib/oop");
  var BaseHighlightRules = require('<%= highlighter[:path] %>').<%= highlighter[:rule_name] %>;

  var GollumHighlightRules = function() {
    var mergeRules = new BaseHighlightRules();
    this.$rules = mergeRules.getRules();
    <% highlighter[:start_rules].each do |rule| %>
    this.$rules.start.unshift(<%= rule %>);
    <% end %>
    <% highlighter[:block_rules].each do |id, rule| %>
    this.addRules({
      <%= id %> : <%= rule %>
    });
    <% end %>
    this.normalizeRules();
  };

  oop.inherits(GollumHighlightRules, BaseHighlightRules);

  exports.GollumHighlightRules = GollumHighlightRules;
});
<% end %>
// Done defining the extended HighlightRule definitions

(function($) {
  var AceMode = {
    asciidoc: 'GollumAsciidocHighlightRules',
    creole: 'text',
    markdown: 'GollumMarkdownHighlightRules',
    mediawiki: 'text',
    bib: 'latex',
    org: 'text',
    rst: 'GollumRstHighlightRules',
    txt: 'text',
    pod: 'text',
    rdoc: 'rdoc',
    textile: 'GollumTextileHighlightRules'
  };

  $.getEditorMode = function ( mode ) {
    var ace_mode = '';
    if (ace_mode = AceMode[mode]) {
      if (ace_mode.startsWith('Gollum')){ // We have extended highlighters
        var baseMode = ace.require("ace/mode/" + mode).Mode;
        var dynamicMode = new baseMode();
        dynamicMode.HighlightRules = ace.require(ace_mode).GollumHighlightRules;
        return dynamicMode;      
      } else {
        return "ace/mode/" + ace_mode;
      }
    } else {
      return null;
    }
  }

})(jQuery);